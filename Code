import tkinter as tk
from tkinter import filedialog, messagebox
from PIL import Image, ImageDraw, ImageFont, ImageTk

class WatermarkApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Image Watermarking App")
        self.root.geometry("600x550")
        self.root.configure(bg="#1e1e1e")
        self.root.resizable(True, True)

        self.image_path = None
        self.watermarked_image = None

        # Title
        tk.Label(root, text="üñºÔ∏è Transparent Text Watermark", font=("Helvetica", 18, "bold"),
                 bg="#1e1e1e", fg="white").pack(pady=10)

        # Load image button
        tk.Button(root, text="üìÅ Choose Image", command=self.load_image,
                  bg="#3498db", fg="white", font=("Arial", 12)).pack(pady=10)

        # Text entry
        self.text_entry = tk.Entry(root, font=("Arial", 14), width=40)
        self.text_entry.pack(pady=10)
        self.text_entry.insert(0, "")

        # Add watermark button
        tk.Button(root, text="‚úÖ Add Watermark", command=self.add_watermark,
                  bg="#27ae60", fg="white", font=("Arial", 12)).pack(pady=10)

        # Image preview
        self.preview_label = tk.Label(root, bg="white")
        self.preview_label.pack(pady=10)

        # Save button
        tk.Button(root, text="üíæ Save Image", command=self.save_image,
                  bg="#e67e22", fg="white", font=("Arial", 12)).pack(pady=10)

    def load_image(self):
        file_path = filedialog.askopenfilename(filetypes=[("Image Files", "*.jpg *.png *.jpeg")])
        if file_path:
            self.image_path = file_path
            image = Image.open(file_path)
            self.display_image(image)

    def display_image(self, image):
        image_resized = image.resize((300, 300), Image.Resampling.LANCZOS)
        self.tk_image = ImageTk.PhotoImage(image_resized)
        self.preview_label.config(image=self.tk_image)

    def add_watermark(self):
        if not self.image_path:
            messagebox.showwarning("No Image", "Please select an image first.")
            return

        watermark_text = self.text_entry.get().strip()
        if not watermark_text:
            messagebox.showwarning("No Text", "Please enter watermark text.")
            return

        base = Image.open(self.image_path).convert("RGBA")
        txt_layer = Image.new("RGBA", base.size, (255, 255, 255, 0))
        draw = ImageDraw.Draw(txt_layer)

        try:
            font = ImageFont.truetype("arial.ttf", int(base.size[0] * 0.04))
        except:
            font = ImageFont.load_default()

        # Use textbbox instead of textsize (Pillow ‚â• 10)
        bbox = draw.textbbox((0, 0), watermark_text, font=font)
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]

        x = base.width - text_width - 20
        y = base.height - text_height - 20

        draw.text((x, y), watermark_text, font=font, fill=(255, 0, 0, 180))

        combined = Image.alpha_composite(base, txt_layer).convert("RGB")
        self.watermarked_image = combined
        self.display_image(combined)

    def save_image(self):
        if not self.watermarked_image:
            messagebox.showerror("Error", "Please add watermark first.")
            return

        save_path = filedialog.asksaveasfilename(defaultextension=".jpg",
                                                 filetypes=[("JPG File", "*.jpg"), ("PNG File", "*.png")])
        if save_path:
            self.watermarked_image.save(save_path)
            messagebox.showinfo("Saved", "Image saved successfully!")

# Run the App
root = tk.Tk()
app = WatermarkApp(root)
root.mainloop()
